{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const RelativeTime=_ref=>{let{date}=_ref;const[timeAgo,setTimeAgo]=useState('');const updateRelativeTime=()=>{const now=new Date();const pastDate=new Date(date);const diffInSeconds=Math.floor((now-pastDate)/1000);let timeString;if(diffInSeconds<60){timeString=`${diffInSeconds} second${diffInSeconds!==1?'s':''} ago`;}else if(diffInSeconds<3600){const minutes=Math.floor(diffInSeconds/60);timeString=`${minutes} minute${minutes!==1?'s':''} ago`;}else if(diffInSeconds<86400){const hours=Math.floor(diffInSeconds/3600);timeString=`${hours} hour${hours!==1?'s':''} ago`;}else if(diffInSeconds<604800){const days=Math.floor(diffInSeconds/86400);timeString=`${days} day${days!==1?'s':''} ago`;}else if(diffInSeconds<2592000){const weeks=Math.floor(diffInSeconds/604800);timeString=`${weeks} week${weeks!==1?'s':''} ago`;}else if(diffInSeconds<31536000){const months=Math.floor(diffInSeconds/2592000);timeString=`${months} month${months!==1?'s':''} ago`;}else{const years=Math.floor(diffInSeconds/31536000);timeString=`${years} year${years!==1?'s':''} ago`;}setTimeAgo(timeString);};useEffect(()=>{// Function to determine the appropriate update interval\nconst getUpdateInterval=()=>{const now=new Date();const pastDate=new Date(date);const diffInSeconds=Math.floor((now-pastDate)/1000);if(diffInSeconds<3600){// Less than an hour old\nreturn 1000;// Update every second\n}else if(diffInSeconds<86400){// Less than a day old\nreturn 60000;// Update every minute\n}else{return 3600000;// Update every hour\n}};// Update immediately when the component mounts\nupdateRelativeTime();// Initial update interval\nlet currentInterval=getUpdateInterval();// Set up an interval with the appropriate update frequency\nlet intervalId=setInterval(()=>{// Update the display\nupdateRelativeTime();// Check if we need to adjust the interval\nconst newInterval=getUpdateInterval();if(newInterval!==currentInterval){// If the interval needs to change, clear and reset it\nclearInterval(intervalId);currentInterval=newInterval;intervalId=setInterval(updateRelativeTime,currentInterval);}},currentInterval);// Clean up the interval when the component unmounts\nreturn()=>clearInterval(intervalId);},[date]);return/*#__PURE__*/_jsx(\"span\",{title:new Date(date).toLocaleString(),children:timeAgo});};export default RelativeTime;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","RelativeTime","_ref","date","timeAgo","setTimeAgo","updateRelativeTime","now","Date","pastDate","diffInSeconds","Math","floor","timeString","minutes","hours","days","weeks","months","years","getUpdateInterval","currentInterval","intervalId","setInterval","newInterval","clearInterval","title","toLocaleString","children"],"sources":["/Users/praveen/Desktop/USC/CSCI 571 WebTech/learnreact/backup/client/src/components/RelativeTime.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst RelativeTime = ({ date }) => {\n  const [timeAgo, setTimeAgo] = useState('');\n\n  const updateRelativeTime = () => {\n    const now = new Date();\n    const pastDate = new Date(date);\n    const diffInSeconds = Math.floor((now - pastDate) / 1000);\n\n    let timeString;\n\n    if (diffInSeconds < 60) {\n      timeString = `${diffInSeconds} second${diffInSeconds !== 1 ? 's' : ''} ago`;\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      timeString = `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      timeString = `${hours} hour${hours !== 1 ? 's' : ''} ago`;\n    } else if (diffInSeconds < 604800) {\n      const days = Math.floor(diffInSeconds / 86400);\n      timeString = `${days} day${days !== 1 ? 's' : ''} ago`;\n    } else if (diffInSeconds < 2592000) {\n      const weeks = Math.floor(diffInSeconds / 604800);\n      timeString = `${weeks} week${weeks !== 1 ? 's' : ''} ago`;\n    } else if (diffInSeconds < 31536000) {\n      const months = Math.floor(diffInSeconds / 2592000);\n      timeString = `${months} month${months !== 1 ? 's' : ''} ago`;\n    } else {\n      const years = Math.floor(diffInSeconds / 31536000);\n      timeString = `${years} year${years !== 1 ? 's' : ''} ago`;\n    }\n\n    setTimeAgo(timeString);\n  };\n\n  useEffect(() => {\n    // Function to determine the appropriate update interval\n    const getUpdateInterval = () => {\n      const now = new Date();\n      const pastDate = new Date(date);\n      const diffInSeconds = Math.floor((now - pastDate) / 1000);\n\n      if (diffInSeconds < 3600) { // Less than an hour old\n        return 1000; // Update every second\n      } else if (diffInSeconds < 86400) { // Less than a day old\n        return 60000; // Update every minute\n      } else {\n        return 3600000; // Update every hour\n      }\n    };\n\n    // Update immediately when the component mounts\n    updateRelativeTime();\n\n    // Initial update interval\n    let currentInterval = getUpdateInterval();\n\n    // Set up an interval with the appropriate update frequency\n    let intervalId = setInterval(() => {\n      // Update the display\n      updateRelativeTime();\n\n      // Check if we need to adjust the interval\n      const newInterval = getUpdateInterval();\n      if (newInterval !== currentInterval) {\n        // If the interval needs to change, clear and reset it\n        clearInterval(intervalId);\n        currentInterval = newInterval;\n        intervalId = setInterval(updateRelativeTime, currentInterval);\n      }\n    }, currentInterval);\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [date]);\n\n  return <span title={new Date(date).toLocaleString()}>{timeAgo}</span>;\n};\n\nexport default RelativeTime;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}